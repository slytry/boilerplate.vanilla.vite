@use 'sass:math';

@mixin vHidden {
	border: 0;
	clip: rect(0 0 0 0);
	clip-path: inset(50%);
	height: 1px;
	margin: 0 -1px -1px 0;
	overflow: hidden;
	position: absolute;
	white-space: nowrap;
	width: 1px;
}

@mixin textShorten($numLines: 1) {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;

	@supports (-webkit-line-clamp: $numLines) {
		-webkit-box-orient: vertical;
		display: box;
		-webkit-line-clamp: $numLines;
		overflow: hidden;
		text-overflow: ellipsis;
		white-space: initial;
	}
}

@mixin centering {
	display: grid;
	place-content: center;
}

@mixin focusRing {
	outline: $c-grayLines auto 2px;
	outline-offset: 2px;
}

@function decimalRound($number, $digits: 0, $mode: round) {
	$nn: 1;

	// $number must be a number
	@if type-of($number) !=number {
		@warn '#{ $number } is not a number.';
		@return $number;
	}

	// $digits must be a unitless number
	@if type-of($digits) !=number {
		@warn '#{ $digits } is not a number.';
		@return $number;
	} @else if not unitless($digits) {
		@warn '#{ $digits } has a unit.';
		@return $number;
	}

	@if $digits >0 {
		@for $i from 1 through $digits {
			$nn: $nn * 10;
		}
	}

	@if $mode ==round {
		@return math.div(math.round($number * $nn), $nn);
	} @else if $mode ==ceil {
		@return math.div(math.ceil($number * $nn), $nn);
	} @else if $mode ==floor {
		@return math.div(math.floor($number * $nn), $nn);
	} @else {
		@warn '#{ $mode } is undefined keyword.';
		@return $number;
	}
}
